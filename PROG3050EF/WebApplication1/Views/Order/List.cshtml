@using GameStore.Data.UtilityClasses
@using GameStore.Models.ViewModels
@using GameStore.Models.ExtensionModels
@using GameStore.Data
@using Microsoft.AspNetCore.Mvc
@using GameStore
@using GameStore.Models
@using GameStore.TagHelpers
@using GameStore.Data.Static_Data
@using Microsoft.EntityFrameworkCore;
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, GameStore
@model GridViewModel<Order>

@{
    ViewData["Title"] = " | Order Catalog";
    HashSet<string> ordersDisplayed = new HashSet<string>();
    bool isShipped = true;
    double totalPrice = 0;
}

<h1 class="mt-3">My Orders</h1>

    <table class="table table-bordered table-striped table-sm">
        <thead class="thead-dark">
            <tr>
                    <th>
                        <my-sorting-link sort-field="@nameof(Order.OrderNo)"
                            current="@Model.CurrentRoute">Order No</my-sorting-link>
                    </th>          
                    <th>Customer</th>
                    <th>List of Products</th>
                    <th><my-sorting-link sort-field="@nameof(Order.Date)"
                            current="@Model.CurrentRoute">Date</my-sorting-link></th>
                    <th>Is Shipped</th>
                    <th>Total Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Order itemOrder in Model.Items)
            {
                if (!ordersDisplayed.Contains(itemOrder.OrderNo))
                {
                    ordersDisplayed.Add(itemOrder.OrderNo);

                <tr>
                        <td>
                            <partial name="_OrderLinkPartial" model="@itemOrder" />
                        </td>
                        <td>
                            @itemOrder.Cust.Nickname
                        </td>
                        <td>
                            @foreach (Order orderItem in Model.Items.Where(orderItem => orderItem.OrderNo == itemOrder.OrderNo).ToList())
                            {
                                if(orderItem.Game != null)
                                {
                                    <p>@orderItem.Game.Name (Game)</p>
                                }
                                else
                                {
                                    <p>@orderItem.Merchandise.Name (Merchandise)</p>
                                }
                            }
                        </td>
                        <td>
                            @itemOrder.Date.ToString("dd/MM/yyyy")
                        </td>
                        <td>
                            @{isShipped = true;}
                            @foreach (Order orderItem in Model.Items.Where(orderItem => orderItem.OrderNo == itemOrder.OrderNo).ToList())
                            {
                                @if (!orderItem.IsShipped)
                                {
                                    isShipped = false;    
                                }
                            }
                            @(isShipped == true ? "Processed" : "Not Shipped")
                        </td>
                        <td>
                           @{totalPrice = 0;}
                            @foreach (Order orderItem in Model.Items.Where(orderItem => orderItem.OrderNo == itemOrder.OrderNo).ToList())
                            {
                               if(orderItem.Game != null)
                                {
                                    totalPrice += (double)orderItem.Game.Price * orderItem.Quantity;
                                }
                                else
                                {
                                    totalPrice += (double)orderItem.Merchandise.Price * orderItem.Quantity;
                                }
                            }
                            @totalPrice.ToString("C")
                        </td>          
                    </tr>
                }
            }
        </tbody>
    </table>

@{
    for (int i = 1; i <= Model.TotalPages; i++)
    {
    <my-paging-link number="@i" current="@Model.CurrentRoute" />
    }
}